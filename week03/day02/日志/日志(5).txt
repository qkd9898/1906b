---------------2020年6月1日----------------
1、缓存首页内容
2、缓存商品分类菜单
查询商品分类时添加缓存：
	1、查询数据库之前先查询缓存。
	2、查询到结果，直接响应结果。
	3、查询不到，缓存中没有需要查询数据库。
	4、把查询结果添加到缓存中。
	5、返回结果。
向redis中添加缓存：
	Key：PROTAL_CATRESULT_KEY
	Value：商品分类菜单
注意：添加缓存不能影响正常业务逻辑。
3、缓存首页大广告位信息
向redis中添加缓存：
 使用hash对key进行归类。
 //添加到缓存
 redisClient.hset(PORTAL_AD_KEY,AD_CATEGORY_ID.toString(),adNodeList);
 ---------------2020年6月2日----------------
 1.ElasticSearch 介绍
    1.1.为什么要用ElasticSearch？
        处理海量数据(全文检索)
    1.2.ElasticSearch介绍
        ElasticSearch是一个基于Lucene的搜索服务器。
    1.3.Lucene->ES的发展
    1.4.原理与应用
        1.4.1.索引结构
        1.4.2.倒排索引
            倒排索引（Inverted index）:也常被称为反向索引，倒排索引是从关键字到文档的映射（已知关键字求文档）。
            逻辑结构部分是一个倒排索引表，由三部分组成：
            1、将搜索的文档最终以Document方式存储起来。
            2、将要搜索的文档内容分词，所有不重复的词组成分词列表。
            3、每个分词和docment都有关联。
        1.4.3.RESTful应用方法
            Elasticsearch提供 RESTful Api接口进行索引、搜索，并且支持多种客户端。
 2.安装 ElasticSearch
    2.1.环境需求
    2.2.安装ES
    2.3.配置文件
    2.4.启动ES
    2.5.测试
 3.安装Kibana
    3.1.什么是Kibana
    3.2.下载
    3.3.安装
    3.4.修改配置
    3.5.启动
    3.6.测试
 4.安装head
    4.1.什么是head
    4.2.安装
    4.3.测试
 5.ES快速入门
    5.1.index管理
        5.1.1.创建index
        5.1.2.修改index
        5.1.3.删除index
    5.2.mapping管理
        5.2.1 创建mapping
        5.2.2.查询mapping
        5.2.3.更新mapping
        5.2.4.删除mapping
    5.3.document管理
        5.3.1.创建document
            5.3.1.1.POST语法
            5.3.1.2.PUT语法
        5.3.2.查询document
        5.3.3.删除Document
    5.4.ES读写原理
        5.4.1.documnet routing（数据路由）
        5.4.2.ES document写操作原理
        5.4.3.ES document读操作原理
        5.4.4.为什么primary shard数量不可变
 6.IK分词器
    6.1.测试分词器
    6.2.中文分词器
        6.2.1.Lucene自带中文分词器
        6.2.2.第三方中文分析器
        6.3.安装IK分词器
        6.4.两种分词模式
        6.5.自定义词库
 7.field详细介绍
    7.1.field的属性介绍
        7.1.1.type： 通过type属性指定field的类型。
        7.1.2.analyzer： 通过analyzer属性指定分词模式。
        7.1.3.index： 通过index属性指定是否索引。
        7.1.4.field索引不存储
    7.2.常用field类型
        7.2.1.text文本字段
        7.2.2.keyword关键字字段
        7.2.3.date日期类型
        7.2.4.Numeric类型
    7.3.总结
        field属性的设置标准：
              	标准
        分词  	是否有意义
        索引  	是否搜索
        存储  	是否展示
8.Spring Boot整合ElasticSearch
    8.1.ES客户端
    8.2.搭建工程
        8.2.1.pom.xml
        8.2.2.application.yml
        8.2.3.config
        8.2.4.app
    8.3.索引管理
        8.3.1.创建索引库
            8.3.1.1.api
            8.3.1.2.Java Client
        8.3.2.删除索引库
            8.3.2.1.api
            8.3.2.2.java client
---------------2020年6月3日----------------
        8.3.2.添加文档
            8.3.2.1.api
            8.3.2.2.java client
        8.3.3.批量添加文档
            8.3.3.1.api
            8.3.3.2.java client
        8.3.4.修改文档
            8.3.4.1.api
            8.3.4.2.java client
        8.3.5.删除文档
            8.3.5.1.api
            8.3.4.2.java client
     8.4.文档搜索
        8.4.1.准备环境
        8.4.2.简单搜索
            8.4.2.1.api
            8.4.2.2.java client
        8.4.3.DSL搜索
            8.4.3.1.match_all查询
                8.4.3.1.1.api
                8.4.3.1.2.java client
            8.4.3.2.分页查询
                8.4.3.2.1.api
                8.4.3.2.2.java client
        8.4.4.match查询
            8.4.4.1.api
            8.4.4.2	java client
        8.4.5.multi_match查询
            8.4.5.1.api
            8.4.5.1.java client
        8.4.6.bool查询
            8.4.6.1.api
            8.4.6.2.java client
        8.4.7.filter查询
            8.4.7.1.api
            8.4.7.2.java client
        8.4.8.highlight查询
            8.4.8.1.api
            8.4.8.2.java client
---------------2020年6月4日----------------
es集群搭建
   a、集群结构：es集群至少两台
   b、搭建步骤
     1、拷贝节点2，命名为ElasticSearch-2
     2、删除节点2的data目录
     3、修改elasticsearch.yml：
		node.name: usian_node_2
		discovery.zen.ping.unicast.hosts: ["192.168.233.134:9300", "192.168.233.135:9300"]
     4、测试
	 启动两台节点：自动分配分片
	 关闭节点2：集群是高可用的
	 创建备份分配：备份分配和主分片不在同一个节点上
商品搜索
创建：usian_search_web
     usian_search_feign
     usian_search_service
在usian_search_service的配置文件里配置 ES集群
完成 商品一键导入功能
---------------2020年6月7日----------------
商品的搜索
商品的索引库同步
---------------2020年6月8日----------------
redis缓存商品信息
使用redis做缓存，业务逻辑：
1、根据商品id到redis中查询查得到，直接返回
2、查不到，查询mysql， 数据放到redis中
设置缓存的有效期一天的时间，可以保证redis不会被沾满导致内存溢出
缓存穿透
指数据库和redis都没有数据 用户不断的进行访问
这些请求会穿过缓存直接访问数据库，如果访问过大数据库会死亡
解决方案
缓存中没有 数据库中也没有 即便返回空数据也要缓存到
redis中 在给它设置一个失效时间 这样就可以解决缓存穿透了
缓存击穿
redis和数据库有数据 但是redis中的数据快失效了
此时有大量数据访问 在失效的那一刻 所有请求直接访问数据库
导致数据库死亡
解决方案
1.设置热点数据永远不过期
2.设置一个锁 当返回0，获取锁就失败了直接结束
返回1，就继续执行业务，并且删除锁，如果执行业务失败锁就
不会释放，这个时候就需要设置一个失效时间来解决这个问题
---------------2020年6月9日----------------
什么是单点登陆？
SSO单点登录，只用户登陆一次就可以访问全部营业
单点登陆session和redis选择什么？为什么要拆分项目？
如果用session可能会造成session丢失，他们都是kv储存，都有过期时间
所以用redis来做单点登陆   这是个分布式框架 而且有很多功能比较复杂
怎么登陆，怎么查询？
存(登录)：redis(token,user)       cookie(token_key,token)
取(查询用户)：cookie(token)        redis(user)
注册信息的校验？
就是在后台判断 用户名和手机号是否存在，如果从在不能正常注册
用户的注册？
就是一个添加功能
用户的登陆？
去后台判断是否用户或密码是否存在，存在就可以登陆成功，并且把它
放到redis缓存当中，注册 和 登陆 要给密码加密不然很容易被破解，
缓存中不存放密码。
通过token查询用户信息？
当登陆成功之后 不会立刻在页面展示，而需要先从url中取得token
根据token取redis查询，如果redis中没有数据，前台就会立刻删除
token，如果有数据，就说明该用户已经登陆，会从新设置key的过期时间
token每次都先会去缓存中查询
退出登陆？
退出登陆 就是删除redis中的缓存，这样前台也会删除session。
---------------2020年6月10日----------------
购物车功能
购物车的设计
1.用户未登录：用户没有登录，购物车信息会保存到cookie
优点:不占用服务端的储存空间 代码好写 用户体验好
缺点：cookie有限，更换cookie购物车不会同步
2.用户登陆： 用户登陆，购物车会保存到redis
优点：跟换设备购物车内容会同步
缺点：占用服务端储存空间
添加购物车
1.从cookie中查询商品列表
2.添加商品到购物车
3.把购车商品列表写入cookie
查看购物车
遍历map中的value 再把遍历出的value添加到一个空的list
修改购物车
1、获得cookie中的购物车
2、修改购物车中的商品
3、把购物车写到cookie
删除购物车
直接删除商品id
登陆状态下查询购物车
1、从redis中查询商品列表
根据用户 ID 查询用户购物车
2、将商品添加大购物车中
3、将购物车缓存到 redis 中
---------------2020年6月16日----------------
完成了 购物车登陆状态下的查询修改删除
订单模块
在购物车完成结算时点下的按钮会跳转到订单确认页面（模块）
会展示商品的列表
订单会确认用户的地址等信息，在展示订单的时候 会确认是否是登陆状态
如果是登陆状态会直接跳转到订单的确认界面
如果不是登陆状态会跳转到登陆页面
---------------2020年6月17日----------------
完成如何生产订单
订单的要求 ：唯一，可读性高，纯数字
所以这里不能使用uuid
有6中方式：
前三种：时间戳，时间戳+随机数，手机号
后三种：时间戳+自增id（redis的incer命令）
        时间戳+用户id/手机号
        时间戳+用户id/店铺id
前三种不可用 应为 可能会发成重复
功能分析：
保存订单信息，保存商品明细信息，保存物流信息，之后返回订单id

分析：将消息写入消息队列，业务逻辑以异步的方式运行，加快响应速度
扣减库存：这里需要用到MQ 在完成订单id之前把消息发布到mq
然后在商品表完成对库存的监听，最后修改商品的库存

